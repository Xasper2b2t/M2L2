import telebot
import random
import os

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π Telegram –±–æ—Ç –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –º—É—Å–æ—Ä–∞. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!")

@bot.message_handler(commands=['hello'])
def send_hello(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
@bot.message_handler(commands=['trash'])
def send_prre(message):
    bot.reply_to(message, "–¢—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º—É—Å–æ—Ä?üßê")
    bot.send_message(message, "–ï—Å–ª–∏ –¥–∞ —Ç–æ —Ö–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ —è —Ç–µ–±–µ —â–∞—Å –ø–æ–∫–∞–∂—Éüòé")
@bot.message_handler(commands=['wel'])
def send_pre(message):
    """
    Handles the /wel command.  Defines the sort_waste function and local rules,
    then calls sort_waste with example inputs and sends the results to the user.
    """
    def sort_waste(waste_type, is_clean=True, local_rules=None):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Ö–æ–¥, —É—á–∏—Ç—ã–≤–∞—è —Ç–∏–ø, —á–∏—Å—Ç–æ—Ç—É –∏ –º–µ—Å—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞.

        Args:
            waste_type (str): –¢–∏–ø –æ—Ç—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "plastic_bottle", "newspaper", "battery").
            is_clean (bool): –ß–∏—Å—Ç—ã–π –ª–∏ –æ—Ç—Ö–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True).
            local_rules (dict, optional): –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Å—Ç–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
                –ö–ª—é—á–∏ - —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å waste_type (–Ω–∞–ø—Ä–∏–º–µ—Ä, "plastic").
                –ó–Ω–∞—á–µ–Ω–∏—è - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ. Defaults to None.

        Returns:
            str: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –æ—Ç—Ö–æ–¥–∞.
        """

        waste_type = waste_type.lower()

        if local_rules:
            for rule_keyword, rule_instruction in local_rules.items():
                if rule_keyword in waste_type:
                    return rule_instruction

        if "plastic" in waste_type:
            if is_clean:
                return "–û–ø–æ–ª–æ—Å–Ω–∏—Ç–µ, —Å–Ω–∏–º–∏—Ç–µ –∫—Ä—ã—à–∫—É –∏ —Å–¥–∞–π—Ç–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–≥–æ –ø–ª–∞—Å—Ç–∏–∫–∞."
            else:
                return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥—Ä—è–∑–Ω—ã–π –ø–ª–∞—Å—Ç–∏–∫ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å. –í—ã–±—Ä–æ—Å–∏—Ç–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤."
        elif "paper" in waste_type:
            return "–£–¥–∞–ª–∏—Ç–µ —Å–∫–æ–±—ã –∏ —Å–∫—Ä–µ–ø–∫–∏, —Å–¥–∞–π—Ç–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–π –±—É–º–∞–≥–∏."
        elif "glass" in waste_type:
            return "–û–ø–æ–ª–æ—Å–Ω–∏—Ç–µ, —Å–Ω–∏–º–∏—Ç–µ –∫—Ä—ã—à–∫—É –∏ —Å–¥–∞–π—Ç–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–≥–æ —Å—Ç–µ–∫–ª–∞."
        elif "metal" in waste_type:
            return "–û–ø–æ–ª–æ—Å–Ω–∏—Ç–µ –∏ —Å–¥–∞–π—Ç–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–≥–æ –º–µ—Ç–∞–ª–ª–∞."
        elif "battery" in waste_type or "electronic" in waste_type:
            return "–°–¥–∞–π—Ç–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç –ø—Ä–∏–µ–º–∞ –æ–ø–∞—Å–Ω—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤."
        elif "organic" in waste_type:
            return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–ø–æ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–ª–∏ –±–∏–æ—Ä–∞–∑–ª–∞–≥–∞–µ–º—ã–π –ø–∞–∫–µ—Ç."
        else:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ —Ç–∏–ø –æ—Ç—Ö–æ–¥–∞ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Å—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏."

    local_rules_N = {
        "plastic_bag": "–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –≤ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–µ.",
        "pizza_box": "–ö–æ—Ä–æ–±–∫–∏ –∏–∑-–ø–æ–¥ –ø–∏—Ü—Ü—ã, –¥–∞–∂–µ –≥—Ä—è–∑–Ω—ã–µ, –º–æ–∂–Ω–æ —Å–¥–∞—Ç—å –≤ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É (–Ω–æ –ª—É—á—à–µ —É–¥–∞–ª–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –ø–∏—Ü—Ü—ã)."
    }

    results = []
    results.append(sort_waste("plastic_bag", local_rules=local_rules_N))
    results.append(sort_waste("pizza_box", local_rules=local_rules_N))
    results.append(sort_waste("glass_bottle"))
    results.append(sort_waste("dirty_plastic_container", is_clean=False))

    # Send the results back to the user in one message.
    response_text = "\n".join(results)
    bot.reply_to(message, response_text)

@bot.message_handler(commands=['weltrash'])
def send_pe(message):
    """
    Handles the /weltrash command.  Sends a random image from the mems/ directory.
    """
    try:
        file_list = os.listdir('mems')
        if file_list:
            img_name = random.choice(file_list)
            with open(os.path.join('mems', img_name), 'rb') as f:
                bot.send_photo(message.chat.id, f)
        else:
            bot.reply_to(message, "–í –ø–∞–ø–∫–µ 'mems' –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
    except FileNotFoundError:
        bot.reply_to(message, "–ü–∞–ø–∫–∞ 'mems' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        print(f"Error sending meme: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–º–∞.")

@bot.message_handler(commands=['bye'])
def send_bye(message):
    """Handles the /bye command."""
    bot.reply_to(message, "–ü–æ–∫–∞! –£–¥–∞—á–∏!")

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, message.text)

bot.polling()
